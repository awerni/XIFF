% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/clustering.R
\name{getExpressionDimRed}
\alias{getExpressionDimRed}
\title{Create Expression DimReduction.}
\usage{
getExpressionDimRed(
  data,
  anno,
  method = XIFF::dimRedAvailableMethods(),
  clusterMethod = c("pam k = automatic", "pam k = 2", "pam k = 3", "pam k = 4",
    "affinity propagation", "k-means k = automatic", "k-means k = 2", "k-means k = 3",
    "k-means k = 4"),
  geneSource = c("varying_genes", "gene_set"),
  numGenes = 30,
  unit = "log2tpm",
  ...,
  .p = TRUE
)
}
\arguments{
\item{data}{result of \code{getExpressionDimRedData} function.}

\item{anno}{sample annotation.}

\item{method}{method for dimension reduction. 
See: \code{dimRedAvailableMethods()} for supported methods.}

\item{clusterMethod}{clustering method.}

\item{geneSource}{a method used to obtain genes. If set to \code{varying_genes}
then the number of genes will be limited by the \code{numGenes} parameter. Other possible
value \code{gene_set} does not limit the number of genes taken into consideration.}

\item{numGenes}{maximum number of most varying genes to be preserved if \code{geneSource}
equals \code{varying_genes}. Default 30.}

\item{unit}{sets the unit used for dimension reduction. Possible values: \code{log2tpm} (default)
or \code{counts}.}

\item{...}{other parameters passed to dimension reduction functions.}

\item{.p}{progress type, logical or shiny session object}
}
\value{
adds to sample annotation data additional columns:

\itemize{
 \item{"X1, X2"}{ - coordinates in 2D space based on the dimension reduction \code{method}}
 \item{"cluster"}{ - cluster assignment}
}
}
\description{
Create Expression DimReduction.
}
\examples{

# example based on the CLIFF package
if(require("CLIFF")) {
  
  # note - data extraction is done by CLIFF functions
  setDbOptions(getSettings())
  ca <- CLIFF::exampleClassAssigment()
  data <- CLIFF::getExpressionDimRedData(ca, p = TRUE)
  anno <- CLIFF::getCellLineAnno("human")
  
  # data analysis is done by XIFF
  dimRedData <- getExpressionDimRed(data, anno)
  dimRedData \%>\% select(celllinename, X1, X2, class, cluster) \%>\% head
  
  generateExpressionDimRedPlot(dimRedData)

}

}
